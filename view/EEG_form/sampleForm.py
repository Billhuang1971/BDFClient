# -*- coding: utf-8 -*-
from functools import partial

# Form implementation generated from reading ui file '.\setBdf.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QLabel, QDialog


class Ui_Sample(QDialog):
    def setupUi(self,  Setting, dgroup,samplefilter):
        Setting.setObjectName("Setting")
        Setting.resize(1380, 766)

        self.dgroup = dgroup
        self.samplefilter = samplefilter
        self.montage = None
        iFont = QFont("", 11)
        self.dgroupKeys = list(self.dgroup.keys())#分组组名
        glen = len(self.dgroupKeys) #组数
        self.lb_g = []
        self.ck_g = []

        self.main_layout = QtWidgets.QVBoxLayout(Setting)
        self.buttonLayout = QtWidgets.QHBoxLayout()
        # 初始化 label_2 和其他控件
        self.label_2 = QtWidgets.QLabel(Setting)
        #self.label_2.setGeometry(QtCore.QRect(10, 20, 54, 12))
        self.label_2.setObjectName("label_2")
        self.main_layout.addWidget(self.label_2)

        # 创建一个 QScrollArea
        self.scroll_area = QtWidgets.QScrollArea()
        self.scroll_area.setGeometry(QtCore.QRect(10, 50, 1360, 700))  # 滚动区域位置和大小
        self.scroll_area.setWidgetResizable(True)
        self.main_layout.addWidget(self.scroll_area)

        # 创建滚动区域的内部 QWidget
        self.scroll_content = QtWidgets.QWidget(Setting)
        self.scroll_area.setWidget(self.scroll_content)

        # 使用 QGridLayout 管理滚动区域的内容
        self.scroll_layout = QtWidgets.QGridLayout(self.scroll_content)

        self.all = QtWidgets.QCheckBox(Setting, text="全选")
        self.all.stateChanged.connect(self.allChange)
        self.scroll_layout.addWidget(self.all, 0, 0)

        # `y` 是控件垂直位置的偏移量，用来控制行的布局
        x=1
        index_global = 0  # 全局索引
        for i in range(glen):
            # 创建一个按钮，并将它添加到 grid layout 中
            self.lb_g.append(QtWidgets.QPushButton(Setting))
            self.lb_g[i].setObjectName(f"{self.dgroupKeys[i]}")
            self.lb_g[i].clicked.connect(partial(self.groupSel, self.dgroupKeys[i]))
            self.lb_g[i].setStyleSheet('height : 20px;width:60px;color:blue;text-align: left;')
            self.lb_g[i].setCursor(Qt.PointingHandCursor)
            self.lb_g[i].setFixedWidth(60)
            chs = self.dgroup.get(self.dgroupKeys[i])

            # 使用 QGridLayout 将按钮添加到网格中
            self.scroll_layout.addWidget(self.lb_g[i], x, 0)
            index = 1

            # 对应的复选框控件
            for j in range(len(chs)):
                if j != 0 and j % 4 == 0:  # 每6个元素换一行
                    x += 1
                    index = 1

                # 添加复选框
                self.ck_g.append(QtWidgets.QCheckBox(Setting))
                self.ck_g[index_global].setObjectName(f"{chs[j]}")
                self.ck_g[index_global].setFont(iFont)

                # 使用 QGridLayout 将复选框添加到网格中
                self.scroll_layout.addWidget(self.ck_g[index_global], x, index)
                index += 1
                index_global += 1
            x += 2  # 组与组之间换行

        self.pb_ok = QtWidgets.QPushButton(Setting)
        # self.pb_ok.setGeometry(QtCore.QRect(800, 20, 61, 23))
        self.pb_ok.setObjectName("pb_ok")
        self.buttonLayout.addStretch()
        self.buttonLayout.addWidget(self.pb_ok)
        self.pb_cancel = QtWidgets.QPushButton(Setting)
        # self.pb_cancel.setGeometry(QtCore.QRect(900, 20, 61, 23))
        self.pb_cancel.setObjectName("pb_cancel")
        self.buttonLayout.addWidget(self.pb_cancel)
        self.main_layout.addLayout(self.buttonLayout)
        self.lb_gSt = []
        for i in range(len(self.lb_g)):
            self.lb_gSt.append(False)

        # 设置频道初始化
        self.initChannels()


        self.retranslateUi(Setting)
        QtCore.QMetaObject.connectSlotsByName(Setting)


    def retranslateUi(self, Setting):
        _translate = QtCore.QCoreApplication.translate
        Setting.setWindowTitle(_translate("Setting", "样本选择"))



        self.label_2.setText(_translate("Setting", "样本选择："))
        self.pb_ok.setText(_translate("Setting", "确定"))
        self.pb_cancel.setText(_translate("Setting", "取消"))
    def initChannels(self):
        self.all.setChecked(True)
        glen = len(self.dgroupKeys)
        index = 0
        for i in range(glen):
            self.lb_g[i].setText(f"{self.dgroupKeys[i]}")
            chs = self.dgroup.get(self.dgroupKeys[i])
            for j in range(len(chs)):
                self.ck_g[index].setText(f"{chs[j]}")
                # if chs[j] in self.dgroup_filter:
                #     self.ck_g[index].setChecked(True)
                # else:
                #     self.ck_g[index].setChecked(False)
                if chs[j] not in self.samplefilter:
                    self.ck_g[index].setChecked(False)
                else:
                    self.ck_g[index].setChecked(True)
                index += 1
            self.ck_g[index-1].show()
            self.montage = '默认'
            #self.ck_g[index-1].setChecked(True)


    def groupSel(self, gname):
        glen = len(self.dgroupKeys)
        index = 0
        for i in range(glen):
            chs = self.dgroup.get(self.dgroupKeys[i])
            if gname==self.dgroupKeys[i]:
                st=self.lb_gSt[i]
                if st:
                    st=False
                else:
                    st=True
                self.lb_gSt[i]=st
                for j in range(len(chs)):
                   self.ck_g[index].setChecked(st)
                   index += 1
                break;
            else:
                index += len(chs)



    def allChange(self):
        if self.all.isChecked():
            st = True
        else:
            st = False
        glen = len(self.dgroupKeys)
        index = 0
        for i in range(glen):
            chs = self.dgroup.get(self.dgroupKeys[i])
            self.lb_gSt[i] = st
            for j in range(len(chs)):
                self.ck_g[index].setChecked(st)
                index += 1



